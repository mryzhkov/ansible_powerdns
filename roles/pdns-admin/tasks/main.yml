---
- name: Ensure dependencies are present.
  apt:
    name:
      - apt-transport-https
      - gnupg2
    state: present

- name: Add Nodesource apt key.
  apt_key:
    url: https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
    id: "68576280"
    state: present
  register: _nodejs_key

- name: Add NodeSource repositories for Node.js.
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
    - "deb-src https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
  register: _nodejs_repo

- name: Add Yarn apt key 
  apt_key:
    url: https://dl.yarnpkg.com/debian/pubkey.gpg
  register: _yarn_key

- name: Add Yarn repository
  apt_repository:
    repo: "deb https://dl.yarnpkg.com/debian/ stable main"
    filename: yarn
  register: _yarn_repo

- name: Update apt cache if repo was added.
  apt: 
    update_cache: yes
  when: "_nodejs_key.changed or _nodejs_repo.changed or _yarn_key.changed or _yarn_repo.changed"


- name: Intstall requirements
  apt:
    name "{{ item }}"
    update_cache: yes
    state: present
  with_items:
  - python3-dev
  - python3-mysqldb
  - default-libmysqlclient-dev
  - libsasl2-dev
  - libldap2-dev
  - libssl-dev
  - libxml2-dev
  - libxslt1-dev
  - libxmlsec1-dev
  - libffi-dev
  - pkg-config
  - virtualenv
  - build-essential
  - curl
  - git
  - yarn
  - nodejs

- name: Clone PowerDNS-Admin
  git:
    repo: "https://github.com/ngoduykhanh/PowerDNS-Admin"
    dest: "{{ pdns_admin_path }}"

- name: Install virtualenv
  pip:
    name: 'virtualenv'
    virtualenv: "{{ pdns_admin_path }}/env"

- name: Install python requirements
  pip:
    requirements: "{{ pdns_admin_path }}/requirements.txt"
    virtualenv: "{{ pdns_admin_path }}/env"

- name: Install gunicorn
  pip:
    name: gunicorn
    virtualenv: "{{ pdns_admin_path }}/env"

- name: Add app config.py
  template:
    src: "config.py.j2"
    dest: "{{ pdns_admin_path }}/powerdnsadmin/default_config.py"
    mode: '0644'

- name: DB Migrations
  shell: ". {{ pdns_admin_path }}/env/bin/activate; flask db upgrade"
  args:
    chdir: "{{ pdns_admin_path }}"
  environment:
    FLASK_APP: "{{ pdns_admin_path }}/powerdnsadmin/__init__.py"

- name: Yarn dependencies
  shell: ". {{ pdns_admin_path }}/env/bin/activate; yarn install --pure-lockfile"
  environment:
    FLASK_APP: "{{ pdns_admin_path }}/powerdnsadmin/__init__.py"
  args:
    chdir: "{{ pdns_admin_path }}"

- name: Flask init;
  shell: ". {{ pdns_admin_path }}/env/bin/activate; flask assets build"
  environment:
    FLASK_APP: "{{ pdns_admin_path }}/powerdnsadmin/__init__.py"
  args:
    chdir: "{{ pdns_admin_path }}"


- name: Set ownership dir
  file:
    path: "{{ pdns_admin_path }}"
    state: directory
    recurse: yes
    owner: pdns
    group: pdns

- name: Create systemd service pdnsadmin
  template:
    src: pdnsadmin_service.j2
    dest: "/etc/systemd/system/pdnsadmin.service"

- name: Create systemd socket pdnsadmin
  template:
    src: pdnsadmin_socket.j2
    dest: "/etc/systemd/system/pdnsadmin.socket"

- name: Configure check rules for /run/pdnsadmin/
  template:
    src: pdnsadmin.conf
    dest: "/etc/tmpfiles.d/pdnsadmin.conf"

- name: Set owner pid pdnsadmin
  file:
    path: "/run/pdnsadmin/"
    mode: '0755'
    recurse: yes
    owner: pdns
    group: pdns

- name: Restart_pdnsadmin
  systemd:
    name: pdnsadmin
    enabled: yes
    state: restarted
    daemon_reload: yes


